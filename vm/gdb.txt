Breakpoint 1 at 0x3d6c: file src/vm.c, line 69.
Breakpoint 2 at 0x2927: file src/cycle/read.c, line 18.
Breakpoint 3 at 0x26f7: file src/cycle/decode.c, line 17.
Breakpoint 4 at 0x28dc: file src/cycle/exec.c, line 63.
Breakpoint 5 at 0x33af: file src/op/process.c, line 16.
Breakpoint 6 at 0x34a4: file src/op/write.c, line 18.
Breakpoint 7 at 0x3515: file src/op/write.c, line 33.
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000003d6c in vm_loop at src/vm.c:69
2       breakpoint     keep y   0x0000000000002927 in vm_read at src/cycle/read.c:18
3       breakpoint     keep y   0x00000000000026f7 in vm_decode at src/cycle/decode.c:17
4       breakpoint     keep y   0x00000000000028dc in vm_exec at src/cycle/exec.c:63
5       breakpoint     keep y   0x00000000000033af in fork_ at src/op/process.c:16
6       breakpoint     keep y   0x00000000000034a4 in st at src/op/write.c:18
7       breakpoint     keep y   0x0000000000003515 in sti at src/op/write.c:33
Starting program: /workspace/vm/corewar proc_test.cor

Breakpoint 1, vm_loop () at src/vm.c:69
69	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
quit
Breakpoint 1 at 0x3d6c: file src/vm.c, line 69.
Breakpoint 2 at 0x2927: file src/cycle/read.c, line 18.
Breakpoint 3 at 0x26f7: file src/cycle/decode.c, line 17.
Breakpoint 4 at 0x28dc: file src/cycle/exec.c, line 63.
Breakpoint 5 at 0x33af: file src/op/process.c, line 16.
Breakpoint 6 at 0x34a4: file src/op/write.c, line 18.
Breakpoint 7 at 0x3515: file src/op/write.c, line 33.
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000003d6c in vm_loop at src/vm.c:69
2       breakpoint     keep y   0x0000000000002927 in vm_read at src/cycle/read.c:18
3       breakpoint     keep y   0x00000000000026f7 in vm_decode at src/cycle/decode.c:17
4       breakpoint     keep y   0x00000000000028dc in vm_exec at src/cycle/exec.c:63
5       breakpoint     keep y   0x00000000000033af in fork_ at src/op/process.c:16
6       breakpoint     keep y   0x00000000000034a4 in st at src/op/write.c:18
7       breakpoint     keep y   0x0000000000003515 in sti at src/op/write.c:33
Starting program: /workspace/vm/corewar proc_test.cor

Breakpoint 1, vm_loop () at src/vm.c:69
69	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:69
69	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:69
69	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:69
69	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:69
69	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:69
69	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
36		else if (!p->op.callback || p->op.cycles > 0)
lst_iter_arg (lst=0x555555566330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556927 <vm_read>)
    at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{

Breakpoint 1, vm_loop () at src/vm.c:69
69	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:69
69	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:69
69	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:69
69	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:69
69	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:69
69	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:69
69	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555662a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Program not restarted.
Reading symbols from corewar...
Starting program: /workspace/vm/corewar proc_test.cor

Breakpoint 1, vm_loop () at src/vm.c:34
34				files[j++] = av[i];
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
quit
Breakpoint 1 at 0x3dda: file src/vm.c, line 34.
Breakpoint 2 at 0x2a22: file src/cycle/read.c, line 18.
Breakpoint 3 at 0x27f2: file src/cycle/decode.c, line 17.
Breakpoint 4 at 0x29d7: file src/cycle/exec.c, line 63.
Breakpoint 5 at 0x34aa: file src/op/process.c, line 16.
Breakpoint 6 at 0x359f: file src/op/write.c, line 18.
Breakpoint 7 at 0x3610: file src/op/write.c, line 33.
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000003dda in vm_loop at src/vm.c:34
2       breakpoint     keep y   0x0000000000002a22 in vm_read at src/cycle/read.c:18
3       breakpoint     keep y   0x00000000000027f2 in vm_decode at src/cycle/decode.c:17
4       breakpoint     keep y   0x00000000000029d7 in vm_exec at src/cycle/exec.c:63
5       breakpoint     keep y   0x00000000000034aa in fork_ at src/op/process.c:16
6       breakpoint     keep y   0x000000000000359f in st at src/op/write.c:18
7       breakpoint     keep y   0x0000000000003610 in sti at src/op/write.c:33
Starting program: /workspace/vm/corewar 
[Inferior 1 (process 3625) exited with code 01]
Starting program: /workspace/vm/corewar proc_test.cor

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
quit
Breakpoint 1 at 0x3dda: file src/vm.c, line 34.
Breakpoint 2 at 0x2a22: file src/cycle/read.c, line 18.
Breakpoint 3 at 0x27f2: file src/cycle/decode.c, line 17.
Breakpoint 4 at 0x29d7: file src/cycle/exec.c, line 63.
Breakpoint 5 at 0x34aa: file src/op/process.c, line 16.
Breakpoint 6 at 0x359f: file src/op/write.c, line 18.
Breakpoint 7 at 0x3610: file src/op/write.c, line 33.
quit
Breakpoint 1 at 0x3dda: file src/vm.c, line 34.
Breakpoint 2 at 0x2a22: file src/cycle/read.c, line 18.
Breakpoint 3 at 0x27f2: file src/cycle/decode.c, line 17.
Breakpoint 4 at 0x29d7: file src/cycle/exec.c, line 63.
Breakpoint 5 at 0x34aa: file src/op/process.c, line 16.
Breakpoint 6 at 0x359f: file src/op/write.c, line 18.
Breakpoint 7 at 0x3610: file src/op/write.c, line 33.
Starting program: /workspace/vm/corewar 
[Inferior 1 (process 3967) exited with code 01]
Starting program: /workspace/vm/corewar proc_test.cor

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Breakpoint 8 at 0x555555557bea: file src/process.c, line 20.

Breakpoint 8, new_process (player_num=player_num@entry=0 '\000', at=at@entry=0) at src/process.c:20
20	{
Continuing.

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 8, new_process (player_num=player_num@entry=0 '\000', at=at@entry=0) at src/process.c:20
20	{
Continuing.

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 8, new_process (player_num=player_num@entry=0 '\000', at=at@entry=0) at src/process.c:20
20	{
Continuing.

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 8, new_process (player_num=player_num@entry=0 '\000', at=at@entry=0) at src/process.c:20
20	{
Continuing.

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 8, new_process (player_num=player_num@entry=0 '\000', at=at@entry=0) at src/process.c:20
20	{
Continuing.

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 8, new_process (player_num=player_num@entry=0 '\000', at=at@entry=0) at src/process.c:20
20	{
Continuing.

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 8, new_process (player_num=player_num@entry=0 '\000', at=at@entry=0) at src/process.c:20
20	{
Continuing.

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 8, new_process (player_num=player_num@entry=0 '\000', at=at@entry=0) at src/process.c:20
20	{
Continuing.

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 8, new_process (player_num=player_num@entry=0 '\000', at=at@entry=0) at src/process.c:20
20	{
Continuing.

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 8, new_process (player_num=player_num@entry=0 '\000', at=at@entry=0) at src/process.c:20
20	{
Continuing.

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 8, new_process (player_num=player_num@entry=0 '\000', at=at@entry=0) at src/process.c:20
20	{
Continuing.

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 8, new_process (player_num=player_num@entry=0 '\000', at=at@entry=0) at src/process.c:20
20	{
Continuing.

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 8, new_process (player_num=player_num@entry=0 '\000', at=at@entry=0) at src/process.c:20
20	{
Continuing.

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 3, vm_decode (p=p@entry=0x5555555672a0, offset=offset@entry=0x7fffffffebae) at src/cycle/decode.c:17
17	{
Continuing.

Breakpoint 5, fork_ (proc=0x5555555672a0) at src/op/process.c:16
16	{
Continuing.

Breakpoint 8, new_process (player_num=0 '\000', at=4095) at src/process.c:20
20	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Note: breakpoint 5 also set at pc 0x5555555574aa.
Breakpoint 9 at 0x5555555574aa: file src/op/process.c, line 16.

Breakpoint 8, new_process (player_num=player_num@entry=0 '\000', at=at@entry=0) at src/process.c:20
20	{
Continuing.

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 3, vm_decode (p=p@entry=0x5555555672a0, offset=offset@entry=0x7fffffffebae) at src/cycle/decode.c:17
17	{
Continuing.

Breakpoint 5, fork_ (proc=0x5555555672a0) at src/op/process.c:16
16	{
19		foo = new_process(proc->num, shift_pc(proc, proc->op.args.c[0].short_chunk));
$1 = 0

Breakpoint 8, new_process (player_num=0 '\000', at=4095) at src/process.c:20
20	{
23		foo = ft_calloc(1, sizeof(struct s_process));
24		foo->pid = g_pid++;
25		foo->num = player_num;
26		foo->pc = at;
27		g_pool = lst_push_front_blob(g_pool ? g_pool : lst_alloc(blob_free),
29		return (foo);
fork_ (proc=0x5555555672a0) at src/op/process.c:20
20		ft_memcpy(foo->reg, proc->reg, sizeof(t_reg) * (REG_NUMBER + 1));
21		foo->carry = proc->carry;
vm_decode_exec (proc=proc@entry=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:52
52			if (proc->op.callback == zjmp)
57			return (op_arg_offset);
$2 = 1
52			if (proc->op.callback == zjmp)
53			{
54				g_jumped = true;
55				ft_dprintf(g_fd, ">> player %d g_jumped to address: %0#4x\n", proc->num, proc->pc);
56			}
57			return (op_arg_offset);
58		}
59	
60	}
61	
#0  vm_decode_exec (proc=proc@entry=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:57
#1  0x00005555555569e7 in vm_exec (proc=0x5555555672a0, arg=<optimized out>) at src/cycle/exec.c:67
#2  0x0000555555557ffe in lst_iter_arg (lst=0x555555567330, front=front@entry=true, arg=arg@entry=0x7fffffffec1c, 
    apply_arg=0x5555555569d7 <vm_exec>) at lst/lst_iter.c:25
#3  0x0000555555557e38 in vm_loop () at src/vm.c:42
#4  0x0000555555556e34 in main (argc=2, argv=0x7fffffffed38) at src/main.c:27
vm_exec (proc=0x5555555672a0, arg=<optimized out>) at src/cycle/exec.c:69
69		else if (!g_jumped)
71			move_pc(proc, offset);
Starting program: /workspace/vm/corewar proc_test.cor

Breakpoint 8, new_process (player_num=player_num@entry=0 '\000', at=at@entry=0) at src/process.c:20
20	{
Continuing.

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 3, vm_decode (p=p@entry=0x5555555672a0, offset=offset@entry=0x7fffffffebae) at src/cycle/decode.c:17
17	{
21		if (p->op.meta.of.encoded)
32			*offset += 1;
27			ft_dprintf(g_fd, "read %d\n", st);
28			return (st);
29		}
30		else
31		{
32			*offset += 1;
33			mem_read_chunk(p, &p->op.args.c[0], false, *offset);
34			return (st_succ);
35		}
36	}

Breakpoint 8, new_process (player_num=player_num@entry=0 '\000', at=at@entry=0) at src/process.c:20
20	{
Continuing.

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 3, vm_decode (p=0x5555555672a0, offset=0x7fffffffebae) at src/cycle/decode.c:17
17	{
Continuing.

Breakpoint 5, fork_ (proc=0x5555555672a0) at src/op/process.c:16
16	{
19		foo = new_process(proc->num, shift_pc(proc, proc->op.args.c[0].short_chunk));

Breakpoint 8, new_process (player_num=0 '\000', at=4095) at src/process.c:20
20	{
23		foo = ft_calloc(1, sizeof(struct s_process));
24		foo->pid = g_pid++;
Continuing.

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
32			move_pc(p, 1);
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
13	#include "memory.h"
14	#include "process.h"
15	#include "builtin.h"
16	
17	void				vm_read(void *proc, void *arg)
18	{
19		t_proc	p;
20	
21		p = proc;
22		if (mem_at(p) >= op_count)
22		if (mem_at(p) >= op_count)
$3 = {
  name = 0x0,
  callback = 0x0,
  cycles = 0,
  nargs = 0 '\000',
  meta = {
    meta = 0,
    of = {
      arg1_t = 0 '\000',
      arg2_t = 0 '\000',
      arg3_t = 0 '\000',
      long_op = false,
      encoded = false,
      short_chunk = false,
      carry = false,
      padding = 0 '\000'
    }
  },
  doc = 0x0,
  encoded = {
    encod = 0 '\000',
    args = {
      padding = 0 '\000',
      arg_3 = 0 '\000',
      arg_2 = 0 '\000',
      arg_1 = 0 '\000'
    }
  },
  args = {
    v = {
      0,
      0,
      0,
      0
    },
    c = {
      {
        val = {
          byte_1 = 0 '\000',
          byte_2 = 0 '\000',
          byte_3 = 0 '\000',
          byte_4 = 0 '\000'
        },
        chunk = 0,
        short_chunk = 0
      },
      {
        val = {
          byte_1 = 0 '\000',
          byte_2 = 0 '\000',
          byte_3 = 0 '\000',
          byte_4 = 0 '\000'
        },
        chunk = 0,
        short_chunk = 0
      },
      {
        val = {
          byte_1 = 0 '\000',
          byte_2 = 0 '\000',
          byte_3 = 0 '\000',
          byte_4 = 0 '\000'
        },
        chunk = 0,
        short_chunk = 0
      },
      {
        val = {
          byte_1 = 0 '\000',
          byte_2 = 0 '\000',
          byte_3 = 0 '\000',
          byte_4 = 0 '\000'
        },
        chunk = 0,
        short_chunk = 0
      }
    }
  }
}
$4 = {
  name = 0x0,
  callback = 0x0,
  cycles = 0,
  nargs = 0 '\000',
  meta = {
    meta = 0,
    of = {
      arg1_t = 0 '\000',
      arg2_t = 0 '\000',
      arg3_t = 0 '\000',
      long_op = false,
      encoded = false,
      short_chunk = false,
      carry = false,
      padding = 0 '\000'
    }
  },
  doc = 0x0,
  encoded = {
    encod = 0 '\000',
    args = {
      padding = 0 '\000',
      arg_3 = 0 '\000',
      arg_2 = 0 '\000',
      arg_1 = 0 '\000'
    }
  },
  args = {
    v = {
      0,
      0,
      0,
      0
    },
    c = {
      {
        val = {
          byte_1 = 0 '\000',
          byte_2 = 0 '\000',
          byte_3 = 0 '\000',
          byte_4 = 0 '\000'
        },
        chunk = 0,
        short_chunk = 0
      },
      {
        val = {
          byte_1 = 0 '\000',
          byte_2 = 0 '\000',
          byte_3 = 0 '\000',
          byte_4 = 0 '\000'
        },
        chunk = 0,
        short_chunk = 0
      },
      {
        val = {
          byte_1 = 0 '\000',
          byte_2 = 0 '\000',
          byte_3 = 0 '\000',
          byte_4 = 0 '\000'
        },
        chunk = 0,
        short_chunk = 0
      },
      {
        val = {
          byte_1 = 0 '\000',
          byte_2 = 0 '\000',
          byte_3 = 0 '\000',
          byte_4 = 0 '\000'
Quit
quit
Breakpoint 1 at 0x3dec: file src/vm.c, line 34.
Breakpoint 2 at 0x2a27: file src/cycle/read.c, line 18.
Breakpoint 3 at 0x27f2: file src/cycle/decode.c, line 17.
Breakpoint 4 at 0x29dc: file src/cycle/exec.c, line 63.
Breakpoint 5 at 0x34af: file src/op/process.c, line 16.
Breakpoint 6 at 0x35a4: file src/op/write.c, line 18.
Breakpoint 7 at 0x3615: file src/op/write.c, line 33.
Starting program: /workspace/vm/corewar proc_test.cor

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 3, vm_decode (p=0x5555555672a0, offset=0x7fffffffebae) at src/cycle/decode.c:17
17	{
Continuing.

Breakpoint 5, fork_ (proc=0x5555555672a0) at src/op/process.c:16
16	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
$1 = {pid = 2, num = 0 '\000', pc = 4095, reg = {
    0,
    -1,
    0 <repeats 15 times>
  }, carry = false, lives = 0, op = {name = 0x0, callback = 0x0, cycles = 0, nargs = 0 '\000', meta = {meta = 0, of = {
        arg1_t = 0 '\000', arg2_t = 0 '\000', arg3_t = 0 '\000', long_op = false, encoded = false, short_chunk = false, 
        carry = false, padding = 0 '\000'}}, doc = 0x0, encoded = {encod = 0 '\000', args = {padding = 0 '\000', 
        arg_3 = 0 '\000', arg_2 = 0 '\000', arg_1 = 0 '\000'}}, args = {v = {
        0,
        0,
        0,
        0
      }, c = {
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, 
          short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, 
          short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, 
          short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0}
      }}}}
$2 = {pid = 2, num = 0 '\000', pc = 4095, reg = {
    0,
    -1,
    0 <repeats 15 times>
  }, carry = false, lives = 0, op = {name = 0x0, callback = 0x0, cycles = 0, nargs = 0 '\000', meta = {meta = 0, of = {arg1_t = 0 '\000', arg2_t = 0 '\000', arg3_t = 0 '\000', long_op = false, 
        encoded = false, short_chunk = false, carry = false, padding = 0 '\000'}}, doc = 0x0, encoded = {encod = 0 '\000', args = {padding = 0 '\000', arg_3 = 0 '\000', arg_2 = 0 '\000', 
        arg_1 = 0 '\000'}}, args = {v = {
        0,
        0,
        0,
        0
      }, c = {
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0}
      }}}}
$3 = {pid = 2, num = 0 '\000', pc = 4095, reg = {
    0,
    -1,
    0 <repeats 15 times>
  }, carry = false, lives = 0, op = {name = 0x0, callback = 0x0, cycles = 0, nargs = 0 '\000', meta = {meta = 0, of = {
        arg1_t = 0 '\000', arg2_t = 0 '\000', arg3_t = 0 '\000', long_op = false, encoded = false, short_chunk = false, 
        carry = false, padding = 0 '\000'}}, doc = 0x0, encoded = {encod = 0 '\000', args = {padding = 0 '\000', arg_3 = 0 '\000', 
        arg_2 = 0 '\000', arg_1 = 0 '\000'}}, args = {v = {
        0,
        0,
        0,
        0
      }, c = {
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0}
      }}}}
$4 = {pid = 2, num = 0 '\000', pc = 4095, reg = {
    0,
    -1,
    0 <repeats 15 times>
  }, carry = false, lives = 0, op = {name = 0x0, callback = 0x0, cycles = 0, nargs = 0 '\000', meta = {meta = 0, of = {arg1_t = 0 '\000', arg2_t = 0 '\000', arg3_t = 0 '\000', long_op = false, encoded = false, short_chunk = false, carry = false, 
        padding = 0 '\000'}}, doc = 0x0, encoded = {encod = 0 '\000', args = {padding = 0 '\000', arg_3 = 0 '\000', arg_2 = 0 '\000', arg_1 = 0 '\000'}}, args = {v = {
        0,
        0,
        0,
        0
      }, c = {
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0}
      }}}}
$5 = {pid = 2, num = 0 '\000', pc = 4095, reg = {
    0,
    -1,
    0 <repeats 15 times>
  }, carry = false, lives = 0, op = {name = 0x0, callback = 0x0, cycles = 0, nargs = 0 '\000', meta = {meta = 0, of = {arg1_t = 0 '\000', arg2_t = 0 '\000', arg3_t = 0 '\000', long_op = false, 
        encoded = false, short_chunk = false, carry = false, padding = 0 '\000'}}, doc = 0x0, encoded = {encod = 0 '\000', args = {padding = 0 '\000', arg_3 = 0 '\000', arg_2 = 0 '\000', 
        arg_1 = 0 '\000'}}, args = {v = {
        0,
        0,
        0,
        0
      }, c = {
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0}
      }}}}

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 3, vm_decode (p=p@entry=0x5555555672a0, offset=offset@entry=0x7fffffffebae) at src/cycle/decode.c:17
17	{
Continuing.

Breakpoint 5, fork_ (proc=0x5555555672a0) at src/op/process.c:16
16	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
32			move_pc(p, 1);
33			*(t_st *)arg = st_fail;
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
lst_iter_arg (lst=0x555555567330, front=front@entry=true, arg=arg@entry=0x7fffffffec1c, apply_arg=0x555555556a27 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
32			move_pc(p, 1);
33			*(t_st *)arg = st_fail;
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
lst_iter_arg (lst=0x555555567330, front=front@entry=true, arg=arg@entry=0x7fffffffec1c, apply_arg=0x555555556a27 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000555555557dec in vm_loop at src/vm.c:34
	breakpoint already hit 1 time
2       breakpoint     keep y   0x0000555555556a27 in vm_read at src/cycle/read.c:18
	breakpoint already hit 13 times
3       breakpoint     keep y   0x00005555555567f2 in vm_decode at src/cycle/decode.c:17
	breakpoint already hit 1 time
4       breakpoint     keep y   0x00005555555569dc in vm_exec at src/cycle/exec.c:63
	breakpoint already hit 12 times
5       breakpoint     keep y   0x00005555555574af in fork_ at src/op/process.c:16
	breakpoint already hit 1 time
6       breakpoint     keep y   0x00005555555575a4 in st at src/op/write.c:18
7       breakpoint     keep y   0x0000555555557615 in sti at src/op/write.c:33
Note: breakpoint 2 (disabled) also set at pc 0x555555556a27.
Breakpoint 8 at 0x555555556a27: file src/cycle/read.c, line 18.

Breakpoint 8, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
Continuing.

Program received signal SIGINT, Interrupt.
0x00007ffff7e95ed3 in __GI___libc_write (fd=fd@entry=3, buf=0x555555567410, nbytes=4) at ../sysdeps/unix/sysv/linux/write.c:26
26	../sysdeps/unix/sysv/linux/write.c: No such file or directory.
Starting program: /workspace/vm/corewar proc_test.cor

Breakpoint 8, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Num     Type           Disp Enb Address            What
1       breakpoint     keep n   0x0000555555557dec in vm_loop at src/vm.c:34
2       breakpoint     keep n   0x0000555555556a27 in vm_read at src/cycle/read.c:18
3       breakpoint     keep n   0x00005555555567f2 in vm_decode at src/cycle/decode.c:17
4       breakpoint     keep n   0x00005555555569dc in vm_exec at src/cycle/exec.c:63
5       breakpoint     keep n   0x00005555555574af in fork_ at src/op/process.c:16
6       breakpoint     keep n   0x00005555555575a4 in st at src/op/write.c:18
7       breakpoint     keep n   0x0000555555557615 in sti at src/op/write.c:33
8       breakpoint     keep y   0x0000555555556a27 in vm_read at src/cycle/read.c:18
	stop only if g_vm.cycles == 10
	breakpoint already hit 1 time
Continuing.

Breakpoint 5, fork_ (proc=0x5555555672a0) at src/op/process.c:16
16	{
19		foo = new_process(proc->num, shift_pc(proc, proc->op.args.c[0].short_chunk));
20		ft_memcpy(foo->reg, proc->reg, sizeof(t_reg) * (REG_NUMBER + 1));
21		foo->carry = proc->carry;
vm_decode_exec (proc=proc@entry=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:52
52			if (proc->op.callback == zjmp)
57			return (op_arg_offset);
vm_exec (proc=0x5555555672a0, arg=<optimized out>) at src/cycle/exec.c:69
69		else if (!g_jumped)
$6 = 3 '\003'
71			move_pc(proc, offset);
72			ft_dprintf(g_fd, ">> player %d: pc at address %0#4x\n", ((t_proc)proc)->num, ((t_proc)proc)->pc);
lst_iter_arg (lst=0x555555567330, front=front@entry=true, arg=arg@entry=0x7fffffffec1c, apply_arg=0x5555555569dc <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:43
43	    	process_cleanup();
39	    while (!lst_empty(g_pool))
41	    	lst_iter_arg(g_pool, true, &st, vm_read);
42	    	lst_iter_arg(g_pool, true, &st, vm_exec);
Num     Type           Disp Enb Address            What
1       breakpoint     keep n   0x0000555555557dec in vm_loop at src/vm.c:34
2       breakpoint     keep n   0x0000555555556a27 in vm_read at src/cycle/read.c:18
3       breakpoint     keep n   0x00005555555567f2 in vm_decode at src/cycle/decode.c:17
4       breakpoint     keep n   0x00005555555569dc in vm_exec at src/cycle/exec.c:63
5       breakpoint     keep y   0x00005555555574af in fork_ at src/op/process.c:16
	breakpoint already hit 1 time
6       breakpoint     keep n   0x00005555555575a4 in st at src/op/write.c:18
7       breakpoint     keep n   0x0000555555557615 in sti at src/op/write.c:33
8       breakpoint     keep y   0x0000555555556a27 in vm_read at src/cycle/read.c:18
	stop only if g_vm.cycles == 10
	breakpoint already hit 1 time
43	    	process_cleanup();
39	    while (!lst_empty(g_pool))
Breakpoint 9 at 0x555555557e47: file src/vm.c, line 39.
Starting program: /workspace/vm/corewar proc_test.cor

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Program received signal SIGINT, Interrupt.
0x00007ffff7e95ed3 in __GI___libc_write (fd=fd@entry=3, buf=0x555555568420, nbytes=56) at ../sysdeps/unix/sysv/linux/write.c:26
26	../sysdeps/unix/sysv/linux/write.c: No such file or directory.
Num     Type           Disp Enb Address            What
1       breakpoint     keep n   0x0000555555557dec in vm_loop at src/vm.c:34
2       breakpoint     keep n   0x0000555555556a27 in vm_read at src/cycle/read.c:18
	breakpoint already hit 1 time
3       breakpoint     keep n   0x00005555555567f2 in vm_decode at src/cycle/decode.c:17
4       breakpoint     keep n   0x00005555555569dc in vm_exec at src/cycle/exec.c:63
5       breakpoint     keep n   0x00005555555574af in fork_ at src/op/process.c:16
6       breakpoint     keep n   0x00005555555575a4 in st at src/op/write.c:18
7       breakpoint     keep n   0x0000555555557615 in sti at src/op/write.c:33
8       breakpoint     keep n   0x0000555555556a27 in vm_read at src/cycle/read.c:18
	stop only if g_vm.cycles == 10
9       breakpoint     keep n   0x0000555555557e47 in vm_loop at src/vm.c:39
	stop only if g_vm.cycles == 11
Program not restarted.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 5, fork_ (proc=0x5555555672a0) at src/op/process.c:16
16	{
19		foo = new_process(proc->num, shift_pc(proc, proc->op.args.c[0].short_chunk));
20		ft_memcpy(foo->reg, proc->reg, sizeof(t_reg) * (REG_NUMBER + 1));
21		foo->carry = proc->carry;
vm_decode_exec (proc=proc@entry=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:52
52			if (proc->op.callback == zjmp)
57			return (op_arg_offset);
vm_exec (proc=0x5555555672a0, arg=<optimized out>) at src/cycle/exec.c:69
69		else if (!g_jumped)
71			move_pc(proc, offset);
72			ft_dprintf(g_fd, ">> player %d: pc at address %0#4x\n", ((t_proc)proc)->num, ((t_proc)proc)->pc);
lst_iter_arg (lst=0x555555567330, front=front@entry=true, arg=arg@entry=0x7fffffffec1c, apply_arg=0x5555555569dc <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:43
43	    	process_cleanup();

Breakpoint 9, vm_loop () at src/vm.c:39
39	    while (!lst_empty(g_pool))
41	    	lst_iter_arg(g_pool, true, &st, vm_read);

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
32			move_pc(p, 1);
33			*(t_st *)arg = st_fail;
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
lst_iter_arg (lst=0x555555567330, front=front@entry=true, arg=arg@entry=0x7fffffffec1c, apply_arg=0x555555556a27 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 5, fork_ (proc=0x5555555672a0) at src/op/process.c:16
16	{
19		foo = new_process(proc->num, shift_pc(proc, proc->op.args.c[0].short_chunk));
20		ft_memcpy(foo->reg, proc->reg, sizeof(t_reg) * (REG_NUMBER + 1));
21		foo->carry = proc->carry;
vm_decode_exec (proc=proc@entry=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:52
52			if (proc->op.callback == zjmp)
57			return (op_arg_offset);
vm_exec (proc=0x5555555672a0, arg=<optimized out>) at src/cycle/exec.c:69
69		else if (!g_jumped)
71			move_pc(proc, offset);
72			ft_dprintf(g_fd, ">> player %d: pc at address %0#4x\n", ((t_proc)proc)->num, ((t_proc)proc)->pc);
lst_iter_arg (lst=0x555555567330, front=front@entry=true, arg=arg@entry=0x7fffffffec1c, apply_arg=0x5555555569dc <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:43
43	    	process_cleanup();

Breakpoint 9, vm_loop () at src/vm.c:39
39	    while (!lst_empty(g_pool))
41	    	lst_iter_arg(g_pool, true, &st, vm_read);

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
$7 = 0 '\000'
$8 = 2
32			move_pc(p, 1);
33			*(t_st *)arg = st_fail;
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
lst_iter_arg (lst=0x555555567330, front=front@entry=true, arg=arg@entry=0x7fffffffec1c, apply_arg=0x555555556a27 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
$9 = 1
30		else if (g_ops[mem_at(p)].callback == nop)
32			move_pc(p, 1);
33			*(t_st *)arg = st_fail;
Num     Type           Disp Enb Address            What
1       breakpoint     keep n   0x0000555555557dec in vm_loop at src/vm.c:34
2       breakpoint     keep y   0x0000555555556a27 in vm_read at src/cycle/read.c:18
	breakpoint already hit 12 times
3       breakpoint     keep n   0x00005555555567f2 in vm_decode at src/cycle/decode.c:17
4       breakpoint     keep n   0x00005555555569dc in vm_exec at src/cycle/exec.c:63
5       breakpoint     keep y   0x00005555555574af in fork_ at src/op/process.c:16
	breakpoint already hit 1 time
6       breakpoint     keep n   0x00005555555575a4 in st at src/op/write.c:18
7       breakpoint     keep n   0x0000555555557615 in sti at src/op/write.c:33
8       breakpoint     keep n   0x0000555555556a27 in vm_read at src/cycle/read.c:18
	stop only if g_vm.cycles == 10
9       breakpoint     keep y   0x0000555555557e47 in vm_loop at src/vm.c:39
	stop only if g_vm.cycles == 11
	breakpoint already hit 1 time
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
lst_iter_arg (lst=0x555555567330, front=front@entry=true, arg=arg@entry=0x7fffffffec1c, apply_arg=0x555555556a27 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:42
42	    	lst_iter_arg(g_pool, true, &st, vm_exec);

Breakpoint 4, vm_exec (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
Breakpoint 10 at 0x555555556894: file src/cycle/exec.c, line 20.
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 10, verify_proc (p=p@entry=0x5555555684f0, arg=arg@entry=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (p->op.callback == op_nop)
lst_iter_arg (lst=0x555555567330, front=front@entry=true, arg=arg@entry=0x7fffffffec1c, apply_arg=0x5555555569dc <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 10, verify_proc (p=p@entry=0x5555555672a0, arg=arg@entry=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (p->op.callback == op_nop)
22	    p->op.cycles++;
23		if (!p->op.cycles)
quit
Breakpoint 1 at 0x3df4: file src/vm.c, line 34.
Breakpoint 2 at 0x2a2f: file src/cycle/read.c, line 18.
Breakpoint 3 at 0x27f2: file src/cycle/decode.c, line 17.
Breakpoint 4 at 0x29dc: file src/cycle/exec.c, line 63.
Breakpoint 5 at 0x34b7: file src/op/process.c, line 16.
Breakpoint 6 at 0x35ac: file src/op/write.c, line 18.
Breakpoint 7 at 0x361d: file src/op/write.c, line 33.
Starting program: /workspace/vm/corewar proc_test.cor

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 3, vm_decode (p=0x5555555672a0, offset=0x7fffffffebae) at src/cycle/decode.c:17
17	{
Continuing.

Breakpoint 5, fork_ (proc=0x5555555672a0) at src/op/process.c:16
16	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Note: breakpoint 2 also set at pc 0x555555556a2f.
Breakpoint 8 at 0x555555556a2f: file src/cycle/read.c, line 18.
Starting program: /workspace/vm/corewar proc_test.cor

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Num     Type           Disp Enb Address            What
1       breakpoint     keep n   0x0000555555557df4 in vm_loop at src/vm.c:34
	breakpoint already hit 1 time
2       breakpoint     keep n   0x0000555555556a2f in vm_read at src/cycle/read.c:18
	breakpoint already hit 1 time
3       breakpoint     keep n   0x00005555555567f2 in vm_decode at src/cycle/decode.c:17
4       breakpoint     keep n   0x00005555555569dc in vm_exec at src/cycle/exec.c:63
5       breakpoint     keep n   0x00005555555574b7 in fork_ at src/op/process.c:16
6       breakpoint     keep n   0x00005555555575ac in st at src/op/write.c:18
7       breakpoint     keep n   0x000055555555761d in sti at src/op/write.c:33
8       breakpoint     keep n   0x0000555555556a2f in vm_read at src/cycle/read.c:18
	stop only if g_vm.cycles == 11
Starting program: /workspace/vm/corewar proc_test.cor

Breakpoint 8, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
32			move_pc(p, 1);
1: *p = {pid = 2, num = 0 '\000', pc = 4095, reg = {
    0,
    -1,
    0 <repeats 15 times>
  }, carry = false, lives = 0, op = {name = 0x0, callback = 0x0, cycles = 0, nargs = 0 '\000', meta = {meta = 0, of = {arg1_t = 0 '\000', arg2_t = 0 '\000', arg3_t = 0 '\000', long_op = false, 
        encoded = false, short_chunk = false, carry = false, padding = 0 '\000'}}, doc = 0x0, encoded = {encod = 0 '\000', args = {padding = 0 '\000', arg_3 = 0 '\000', arg_2 = 0 '\000', 
        arg_1 = 0 '\000'}}, args = {v = {
        0,
        0,
        0,
        0
      }, c = {
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0}
      }}}}
33			*(t_st *)arg = st_fail;
1: *p = {pid = 2, num = 0 '\000', pc = 0, reg = {
    0,
    -1,
    0 <repeats 15 times>
  }, carry = false, lives = 0, op = {name = 0x0, callback = 0x0, cycles = 0, nargs = 0 '\000', meta = {meta = 0, of = {arg1_t = 0 '\000', arg2_t = 0 '\000', arg3_t = 0 '\000', long_op = false, 
        encoded = false, short_chunk = false, carry = false, padding = 0 '\000'}}, doc = 0x0, encoded = {encod = 0 '\000', args = {padding = 0 '\000', arg_3 = 0 '\000', arg_2 = 0 '\000', 
        arg_1 = 0 '\000'}}, args = {v = {
        0,
        0,
        0,
        0
      }, c = {
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0}
      }}}}
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
1: *p = {pid = 2, num = 0 '\000', pc = 0, reg = {
    0,
    -1,
    0 <repeats 15 times>
  }, carry = false, lives = 0, op = {name = 0x0, callback = 0x0, cycles = 0, nargs = 0 '\000', meta = {meta = 0, of = {arg1_t = 0 '\000', arg2_t = 0 '\000', arg3_t = 0 '\000', long_op = false, 
        encoded = false, short_chunk = false, carry = false, padding = 0 '\000'}}, doc = 0x0, encoded = {encod = 0 '\000', args = {padding = 0 '\000', arg_3 = 0 '\000', arg_2 = 0 '\000', 
        arg_1 = 0 '\000'}}, args = {v = {
        0,
        0,
        0,
        0
      }, c = {
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0}
      }}}}
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a2f <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
1: *p = <error: value has been optimized out>
22		if (mem_at(p) >= op_count)
1: *p = {pid = 1, num = 0 '\000', pc = 3, reg = {
    0,
    -1,
    0 <repeats 15 times>
  }, carry = false, lives = 0, op = {name = 0x55555555e498 "nop", callback = 0x555555557440 <nop>, cycles = 0, nargs = 0 '\000', meta = {meta = 0, of = {arg1_t = 0 '\000', arg2_t = 0 '\000', 
        arg3_t = 0 '\000', long_op = false, encoded = false, short_chunk = false, carry = false, padding = 0 '\000'}}, doc = 0x55555555e49c "(0x0) no operation", encoded = {encod = 0 '\000', args = {
        padding = 0 '\000', arg_3 = 0 '\000', arg_2 = 0 '\000', arg_1 = 0 '\000'}}, args = {v = {
        0,
        0,
        0,
        0
      }, c = {
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0}
      }}}}
2: p->op.cycles = 0
30		else if (g_ops[mem_at(p)].callback == nop)
2: p->op.cycles = 0
32			move_pc(p, 1);
2: p->op.cycles = 0
33			*(t_st *)arg = st_fail;
2: p->op.cycles = 0
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
2: p->op.cycles = 0
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a2f <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:42
42	    	lst_iter_arg(g_pool, true, &st, vm_exec);

Breakpoint 4, vm_exec (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569dc <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569dc <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
Breakpoint 9 at 0x555555556894: file src/cycle/exec.c, line 20.
Starting program: /workspace/vm/corewar proc_test.cor

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Num     Type           Disp Enb Address            What
1       breakpoint     keep n   0x0000555555557df4 in vm_loop at src/vm.c:34
	breakpoint already hit 1 time
2       breakpoint     keep n   0x0000555555556a2f in vm_read at src/cycle/read.c:18
3       breakpoint     keep n   0x00005555555567f2 in vm_decode at src/cycle/decode.c:17
4       breakpoint     keep n   0x00005555555569dc in vm_exec at src/cycle/exec.c:63
5       breakpoint     keep n   0x00005555555574b7 in fork_ at src/op/process.c:16
6       breakpoint     keep n   0x00005555555575ac in st at src/op/write.c:18
7       breakpoint     keep n   0x000055555555761d in sti at src/op/write.c:33
8       breakpoint     keep n   0x0000555555556a2f in vm_read at src/cycle/read.c:18
	stop only if g_vm.cycles == 11
9       breakpoint     keep n   0x0000555555556894 in verify_proc at src/cycle/exec.c:20
Starting program: /workspace/vm/corewar proc_test.cor

Breakpoint 8, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
2: p->op.cycles = <error: value has been optimized out>
22		if (mem_at(p) >= op_count)
2: p->op.cycles = 0
30		else if (g_ops[mem_at(p)].callback == nop)
2: p->op.cycles = 0
32			move_pc(p, 1);
2: p->op.cycles = 0
33			*(t_st *)arg = st_fail;
2: p->op.cycles = 0
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
2: p->op.cycles = 0
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a2f <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
2: p->op.cycles = <error: value has been optimized out>
22		if (mem_at(p) >= op_count)
2: p->op.cycles = 0
30		else if (g_ops[mem_at(p)].callback == nop)
2: p->op.cycles = 0
32			move_pc(p, 1);
2: p->op.cycles = 0
33			*(t_st *)arg = st_fail;
2: p->op.cycles = 0
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
2: p->op.cycles = 0
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a2f <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:42
42	    	lst_iter_arg(g_pool, true, &st, vm_exec);

Breakpoint 4, vm_exec (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000555555557df4 in vm_loop at src/vm.c:34
2       breakpoint     keep y   0x0000555555556a2f in vm_read at src/cycle/read.c:18
	breakpoint already hit 1 time
3       breakpoint     keep y   0x00005555555567f2 in vm_decode at src/cycle/decode.c:17
4       breakpoint     keep y   0x00005555555569dc in vm_exec at src/cycle/exec.c:63
	breakpoint already hit 1 time
5       breakpoint     keep y   0x00005555555574b7 in fork_ at src/op/process.c:16
6       breakpoint     keep y   0x00005555555575ac in st at src/op/write.c:18
7       breakpoint     keep y   0x000055555555761d in sti at src/op/write.c:33
8       breakpoint     keep y   0x0000555555556a2f in vm_read at src/cycle/read.c:18
	stop only if g_vm.cycles == 11
	breakpoint already hit 2 times
9       breakpoint     keep y   0x0000555555556894 in verify_proc at src/cycle/exec.c:20

Breakpoint 9, verify_proc (p=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == op_nop)
3: p->op.cycles = 0
4: p->op.callback = (const t_op_callback) 0x0
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569dc <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 9, verify_proc (p=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == op_nop)
3: p->op.cycles = 0
4: p->op.callback = (const t_op_callback) 0x555555557440 <nop>

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Num     Type           Disp Enb Address            What
1       breakpoint     keep n   0x0000555555557e05 in vm_loop at src/vm.c:34
	breakpoint already hit 1 time
2       breakpoint     keep n   0x0000555555556a40 in vm_read at src/cycle/read.c:18
3       breakpoint     keep n   0x00005555555567f2 in vm_decode at src/cycle/decode.c:17
4       breakpoint     keep n   0x00005555555569ed in vm_exec at src/cycle/exec.c:63
5       breakpoint     keep n   0x00005555555574c8 in fork_ at src/op/process.c:16
6       breakpoint     keep n   0x00005555555575bd in st at src/op/write.c:18
7       breakpoint     keep n   0x000055555555762e in sti at src/op/write.c:33
8       breakpoint     keep n   0x0000555555556a2f in vm_exec at src/cycle/exec.c:72
	stop only if g_vm.cycles == 11
9       breakpoint     keep n   0x0000555555556894 in verify_proc at src/cycle/exec.c:20

Program received signal SIGSEGV, Segmentation fault.
0x0000555555556a32 in vm_exec (proc=0x5555555672a0, arg=<optimized out>) at src/cycle/exec.c:72
72			ft_dprintf(g_fd, ">> player %d: pc at address %0#4x\n", ((t_proc)proc)->num, ((t_proc)proc)->pc);
#0  0x0000555555556a32 in vm_exec (proc=0x5555555672a0, arg=<optimized out>) at src/cycle/exec.c:72
#1  0x000055555555801c in lst_iter_arg (lst=0x555555567330, front=front@entry=true, arg=arg@entry=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:25
#2  0x0000555555557e56 in vm_loop () at src/vm.c:42
#3  0x0000555555556e52 in main (argc=2, argv=0x7fffffffed38) at src/main.c:27
$1 = (void *) 0x5555555672a0
No symbol "t_procproc" in current context.
$2 = {pid = 1, num = 0 '\000', pc = 3, reg = {
    0,
    -1,
    0 <repeats 15 times>
  }, carry = false, lives = 0, op = {name = 0x55555555e4de "fork", callback = 0x5555555574c8 <fork_>, cycles = 0, nargs = 1 '\001', meta = {meta = 16386, of = {arg1_t = 2 '\002', arg2_t = 0 '\000', 
        arg3_t = 0 '\000', long_op = false, encoded = false, short_chunk = true, carry = false, padding = 0 '\000'}}, 
    doc = 0x55555555e718 "creates a new process with program counter at the given argument", encoded = {encod = 0 '\000', args = {padding = 0 '\000', arg_3 = 0 '\000', arg_2 = 0 '\000', 
        arg_1 = 0 '\000'}}, args = {v = {
        65535,
        0,
        0,
        0
      }, c = {
        {val = {byte_1 = 255 '\377', byte_2 = 255 '\377', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 65535, short_chunk = -1},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
        {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0}
      }}}}
Quit
quit
Breakpoint 1 at 0x3e05: file src/vm.c, line 34.
Breakpoint 2 at 0x2a40: file src/cycle/read.c, line 18.
Breakpoint 3 at 0x27f2: file src/cycle/decode.c, line 17.
Breakpoint 4 at 0x29ed: file src/cycle/exec.c, line 63.
Breakpoint 5 at 0x34c8: file src/op/process.c, line 16.
Breakpoint 6 at 0x35bd: file src/op/write.c, line 18.
Breakpoint 7 at 0x362e: file src/op/write.c, line 33.
Starting program: /workspace/vm/corewar 
[Inferior 1 (process 6482) exited with code 01]
Starting program: /workspace/vm/corewar proc_test.cor

Breakpoint 1, vm_loop () at src/vm.c:34
34	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
Continuing.

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
Continuing.

Breakpoint 3, vm_decode (p=0x5555555672a0, offset=0x7fffffffebae) at src/cycle/decode.c:17
17	{
Continuing.

Breakpoint 5, fork_ (proc=0x5555555672a0) at src/op/process.c:16
16	{
Breakpoint 8 at 0x555555556894: file src/cycle/exec.c, line 20.
19		foo = new_process(proc->num, shift_pc(proc, proc->op.args.c[0].short_chunk));
20		ft_memcpy(foo->reg, proc->reg, sizeof(t_reg) * (REG_NUMBER + 1));
21		foo->carry = proc->carry;
vm_decode_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:52
52			if (proc->op.callback == zjmp)
57			return (op_arg_offset);
vm_exec (proc=0x5555555672a0, arg=<optimized out>) at src/cycle/exec.c:69
69		else if (!g_jumped)
71			move_pc(proc, offset);
72			ft_dprintf(g_fd, ">> player %d: pc at address %0#4x\n", ((t_proc)proc)->num, ((t_proc)proc)->pc);
74		set_nop(proc);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:43
43	    	process_cleanup();
39	    while (!lst_empty(g_pool))
41	    	lst_iter_arg(g_pool, true, &st, vm_read);

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
32			move_pc(p, 1);
33			*(t_st *)arg = st_fail;
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
32			move_pc(p, 1);
33			*(t_st *)arg = st_fail;
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:42
42	    	lst_iter_arg(g_pool, true, &st, vm_exec);

Breakpoint 4, vm_exec (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
$1 = {name = 0x0, callback = 0x0, cycles = 0, nargs = 0 '\000', meta = {meta = 0, of = {arg1_t = 0 '\000', arg2_t = 0 '\000', arg3_t = 0 '\000', long_op = false, encoded = false, short_chunk = false, 
      carry = false, padding = 0 '\000'}}, doc = 0x0, encoded = {encod = 0 '\000', args = {padding = 0 '\000', arg_3 = 0 '\000', arg_2 = 0 '\000', arg_1 = 0 '\000'}}, args = {v = {
      0,
      0,
      0,
      0
    }, c = {
      {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
      {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
      {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
      {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0}
    }}}
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
No symbol "p" in current context.
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
$2 = {name = 0x55555555e498 "nop", callback = 0x555555557451 <nop>, cycles = 0, nargs = 0 '\000', meta = {meta = 0, of = {arg1_t = 0 '\000', arg2_t = 0 '\000', arg3_t = 0 '\000', long_op = false, 
      encoded = false, short_chunk = false, carry = false, padding = 0 '\000'}}, doc = 0x55555555e49c "(0x0) no operation", encoded = {encod = 0 '\000', args = {padding = 0 '\000', arg_3 = 0 '\000', 
      arg_2 = 0 '\000', arg_1 = 0 '\000'}}, args = {v = {
      0,
      0,
      0,
      0
    }, c = {
      {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
      {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
      {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0},
      {val = {byte_1 = 0 '\000', byte_2 = 0 '\000', byte_3 = 0 '\000', byte_4 = 0 '\000'}, chunk = 0, short_chunk = 0}
    }}}
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:43
43	    	process_cleanup();
39	    while (!lst_empty(g_pool))
41	    	lst_iter_arg(g_pool, true, &st, vm_read);

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
36		else if (!p->op.callback || p->op.cycles > 0)
38			ft_memcpy(&p->op, &g_ops[mem_at(p)], sizeof(t_op));
39			p->op.cycles *= -1;
40			*(t_st *)arg = st_succ;
41			ft_dprintf(g_fd, "player %d: `%s` operation, scheduled after %d cycles\n", p->num, p->op.name, -p->op.cycles);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
32			move_pc(p, 1);
33			*(t_st *)arg = st_fail;
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:42
42	    	lst_iter_arg(g_pool, true, &st, vm_exec);

Breakpoint 4, vm_exec (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
22	    p->op.cycles++;
23		if (!p->op.cycles)
27			*(t_st *)arg = st_succ;
28			ft_dprintf(g_fd, "player %d: `%s` operation has more %d cycles to wait\n", p->num, p->op.name, -p->op.cycles);
29			return (st_fail);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:43
43	    	process_cleanup();
39	    while (!lst_empty(g_pool))
41	    	lst_iter_arg(g_pool, true, &st, vm_read);

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
36		else if (!p->op.callback || p->op.cycles > 0)
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
32			move_pc(p, 1);
33			*(t_st *)arg = st_fail;
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:42
42	    	lst_iter_arg(g_pool, true, &st, vm_exec);

Breakpoint 4, vm_exec (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
22	    p->op.cycles++;
23		if (!p->op.cycles)
27			*(t_st *)arg = st_succ;
28			ft_dprintf(g_fd, "player %d: `%s` operation has more %d cycles to wait\n", p->num, p->op.name, -p->op.cycles);
29			return (st_fail);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:43
43	    	process_cleanup();
39	    while (!lst_empty(g_pool))
41	    	lst_iter_arg(g_pool, true, &st, vm_read);

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
36		else if (!p->op.callback || p->op.cycles > 0)
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
32			move_pc(p, 1);
33			*(t_st *)arg = st_fail;
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:42
42	    	lst_iter_arg(g_pool, true, &st, vm_exec);

Breakpoint 4, vm_exec (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
22	    p->op.cycles++;
23		if (!p->op.cycles)
27			*(t_st *)arg = st_succ;
28			ft_dprintf(g_fd, "player %d: `%s` operation has more %d cycles to wait\n", p->num, p->op.name, -p->op.cycles);
29			return (st_fail);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:43
43	    	process_cleanup();
39	    while (!lst_empty(g_pool))
41	    	lst_iter_arg(g_pool, true, &st, vm_read);

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
36		else if (!p->op.callback || p->op.cycles > 0)
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
32			move_pc(p, 1);
33			*(t_st *)arg = st_fail;
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:42
42	    	lst_iter_arg(g_pool, true, &st, vm_exec);

Breakpoint 4, vm_exec (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
22	    p->op.cycles++;
23		if (!p->op.cycles)
27			*(t_st *)arg = st_succ;
28			ft_dprintf(g_fd, "player %d: `%s` operation has more %d cycles to wait\n", p->num, p->op.name, -p->op.cycles);
29			return (st_fail);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:43
43	    	process_cleanup();
39	    while (!lst_empty(g_pool))
41	    	lst_iter_arg(g_pool, true, &st, vm_read);

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
36		else if (!p->op.callback || p->op.cycles > 0)
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
32			move_pc(p, 1);
33			*(t_st *)arg = st_fail;
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:42
42	    	lst_iter_arg(g_pool, true, &st, vm_exec);

Breakpoint 4, vm_exec (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
22	    p->op.cycles++;
23		if (!p->op.cycles)
27			*(t_st *)arg = st_succ;
28			ft_dprintf(g_fd, "player %d: `%s` operation has more %d cycles to wait\n", p->num, p->op.name, -p->op.cycles);
29			return (st_fail);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:43
43	    	process_cleanup();
39	    while (!lst_empty(g_pool))
41	    	lst_iter_arg(g_pool, true, &st, vm_read);

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
36		else if (!p->op.callback || p->op.cycles > 0)
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
32			move_pc(p, 1);
33			*(t_st *)arg = st_fail;
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:42
42	    	lst_iter_arg(g_pool, true, &st, vm_exec);

Breakpoint 4, vm_exec (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
22	    p->op.cycles++;
23		if (!p->op.cycles)
27			*(t_st *)arg = st_succ;
28			ft_dprintf(g_fd, "player %d: `%s` operation has more %d cycles to wait\n", p->num, p->op.name, -p->op.cycles);
29			return (st_fail);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:43
43	    	process_cleanup();
39	    while (!lst_empty(g_pool))
41	    	lst_iter_arg(g_pool, true, &st, vm_read);

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
36		else if (!p->op.callback || p->op.cycles > 0)
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
32			move_pc(p, 1);
33			*(t_st *)arg = st_fail;
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:42
42	    	lst_iter_arg(g_pool, true, &st, vm_exec);

Breakpoint 4, vm_exec (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
22	    p->op.cycles++;
23		if (!p->op.cycles)
27			*(t_st *)arg = st_succ;
28			ft_dprintf(g_fd, "player %d: `%s` operation has more %d cycles to wait\n", p->num, p->op.name, -p->op.cycles);
29			return (st_fail);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:43
43	    	process_cleanup();
39	    while (!lst_empty(g_pool))
41	    	lst_iter_arg(g_pool, true, &st, vm_read);

Breakpoint 2, vm_read (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
36		else if (!p->op.callback || p->op.cycles > 0)
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 2, vm_read (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/read.c:18
18	{
22		if (mem_at(p) >= op_count)
30		else if (g_ops[mem_at(p)].callback == nop)
32			move_pc(p, 1);
33			*(t_st *)arg = st_fail;
34			ft_dprintf(g_fd ,"player %d: nop, pc at %hu\n", p->num, p->pc);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x555555556a40 <vm_read>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:42
42	    	lst_iter_arg(g_pool, true, &st, vm_exec);

Breakpoint 4, vm_exec (proc=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555684f0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
22	    p->op.cycles++;
23		if (!p->op.cycles)
27			*(t_st *)arg = st_succ;
28			ft_dprintf(g_fd, "player %d: `%s` operation has more %d cycles to wait\n", p->num, p->op.name, -p->op.cycles);
29			return (st_fail);
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
25			apply_arg(walk->blob, arg);

Breakpoint 4, vm_exec (proc=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:63
63	{
66		g_jumped = false;
67		if (!(offset = vm_decode_exec(proc, arg)))

Breakpoint 8, verify_proc (p=0x5555555672a0, arg=0x7fffffffec1c) at src/cycle/exec.c:20
20		if (!p->op.callback || p->op.callback == nop)
lst_iter_arg (lst=0x555555567330, front=true, arg=0x7fffffffec1c, apply_arg=0x5555555569ed <vm_exec>) at lst/lst_iter.c:26
26			walk = front ? walk->next : walk->prev;
23		while (walk != (front ? lst->tail : lst->head))
vm_loop () at src/vm.c:43
43	    	process_cleanup();
39	    while (!lst_empty(g_pool))
41	    	lst_iter_arg(g_pool, true, &st, vm_read);
